-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ProximityPromptService = game:GetService("ProximityPromptService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

local LocalPlayer = Players.LocalPlayer
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- // GUI SETUP
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "MonHubGui"
ScreenGui.Parent = playerGui
ScreenGui.ResetOnSpawn = false

-- // Toggle Button (M)
local ToggleBtn = Instance.new("ImageButton")
ToggleBtn.Size = UDim2.new(0, 40, 0, 40)
ToggleBtn.Position = UDim2.new(0, 10, 0, 10)
ToggleBtn.BackgroundColor3 = Color3.fromRGB(120, 60, 200) -- tím
ToggleBtn.Image = "rbxassetid://125271077602364" -- Thay đổi ID này thành ID của hình ảnh của bạn
ToggleBtn.Parent = ScreenGui
local ToggleCorner = Instance.new("UICorner", ToggleBtn)
ToggleCorner.CornerRadius = UDim.new(0, 12)

-- // Main Frame (ESP and Fly Menu Toggle)
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 280, 0, 300) -- Kích thước đã điều chỉnh
MainFrame.Position = UDim2.new(0.5, -140, 0.5, -150) -- Vị trí đã điều chỉnh
MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui
MainFrame.Draggable = true
MainFrame.Active = true
MainFrame.Visible = true
local MainFrameCorner = Instance.new("UICorner", MainFrame)
MainFrameCorner.CornerRadius = UDim.new(0, 12)
local MainFrameStroke = Instance.new("UIStroke", MainFrame)
MainFrameStroke.Color = Color3.fromRGB(120, 120, 255)
MainFrameStroke.Thickness = 2

-- // Title
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundTransparency = 1
Title.Text = "Mon Hub Premimum"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 22
Title.Parent = MainFrame

-- // New: Void Player button
local isVoidPlayerActive = false
local btnVoidPlayer = Instance.new("TextButton")
btnVoidPlayer.Size = UDim2.new(0, 220, 0, 25)
btnVoidPlayer.Position = UDim2.new(0.5, -110, 0, 40)
btnVoidPlayer.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
btnVoidPlayer.Text = "Void Player: OFF"
btnVoidPlayer.TextColor3 = Color3.fromRGB(255, 255, 255)
btnVoidPlayer.Font = Enum.Font.GothamBold
btnVoidPlayer.TextSize = 14
btnVoidPlayer.Parent = MainFrame
local BtnCornerVoidPlayer = Instance.new("UICorner", btnVoidPlayer)
BtnCornerVoidPlayer.CornerRadius = UDim.new(0, 10)

-- // ESP Section
local espLabel = Instance.new("TextLabel")
espLabel.Size = UDim2.new(1, 0, 0, 20)
espLabel.Position = UDim2.new(0, 0, 0, 75) -- Vị trí đã điều chỉnh
espLabel.BackgroundTransparency = 1
espLabel.Text = "-- ESP Toggles --"
espLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
espLabel.Font = Enum.Font.Gotham
espLabel.TextSize = 14
espLabel.Parent = MainFrame

-- // ==== NAMLESS FEATURES (Web Slinger Auto Aim + Highest Value ESP) ====
-- ========== WEBSLINGER AUTO AIM ==========
local webSlingerConnection = nil
local webSlingerAutoAimEnabled = false

function enableWebSlingerAutoAim()
    if webSlingerConnection then webSlingerConnection:Disconnect() end
    local tool = LocalPlayer.Backpack:FindFirstChild("Web Slinger") or (character and character:FindFirstChild("Web Slinger"))
    if not tool then
        local args = {"Web Slinger"}
        pcall(function()
            ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RF/CoinsShopService/RequestBuy"):InvokeServer(unpack(args))
        end)
        task.wait(1)
        tool = LocalPlayer.Backpack:FindFirstChild("Web Slinger") or (character and character:FindFirstChild("Web Slinger"))
        if not tool then
            StarterGui:SetCore("SendNotification",{Title="Web Slinger Auto Aim",Text="Failed to get Web Slinger",Duration=3})
            return
        end
    end

    webSlingerAutoAimEnabled = true
    StarterGui:SetCore("SendNotification",{Title="Web Slinger Auto Aim",Text="ON",Duration=2})
    local handle = tool:WaitForChild("Handle")

    local function findNearestPlayer()
        local closest, dist = nil, math.huge
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local hum = plr.Character:FindFirstChild("Humanoid")
                if hum and hum.Health > 0 then
                    local d = (handle.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                    if d < dist then
                        dist = d
                        closest = plr
                    end
                end
            end
        end
        return closest
    end

    webSlingerConnection = tool.Activated:Connect(function()
        local target = findNearestPlayer()
        if target and target.Character then
            local targetHrp = target.Character:FindFirstChild("HumanoidRootPart")
            if targetHrp then
                local pos = targetHrp.Position
                local args = {vector.create(pos.X, pos.Y, pos.Z), targetHrp, handle}
                ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RE/UseItem"):FireServer(unpack(args))
                StarterGui:SetCore("SendNotification",{Title="Web Slinger Auto Aim",Text="Fired at "..target.Name,Duration=2})
            end
        end
    end)
end

function disableWebSlingerAutoAim()
    if webSlingerConnection then webSlingerConnection:Disconnect(); webSlingerConnection=nil end
    webSlingerAutoAimEnabled = false
    StarterGui:SetCore("SendNotification",{Title="Web Slinger Auto Aim",Text="OFF",Duration=2})
end


-- ========== HIGHEST VALUE ESP (FIXED) ==========

local highestValueEnabled = false
local currentHighestGui = nil
local scanConnection = nil

local function extractNumber(str)
    if not str then return 0 end
    local numberStr = str:match("%$(.-)/s") or str:match("(%d+%.?%d*)[kmb]?")
    if not numberStr then return 0 end
    numberStr = numberStr:gsub("%s", "")
    local multiplier = 1
    if str:lower():find("k") then
        multiplier = 1000
        numberStr = numberStr:gsub("[kK]", "")
    elseif str:lower():find("m") then
        multiplier = 1000000
        numberStr = numberStr:gsub("[mM]", "")
    elseif str:lower():find("b") then
        multiplier = 1000000000
        numberStr = numberStr:gsub("[bB]", "")
    end
    return (tonumber(numberStr) or 0) * multiplier
end

local mutationColors = {
    Gold = Color3.fromRGB(255, 215, 0),
    Diamond = Color3.fromRGB(0, 255, 255),
    Lava = Color3.fromRGB(255, 100, 0),
    Bloodrot = Color3.fromRGB(255, 0, 0),
}

local function getMutationTextAndColor(mutation)
    if not mutation or not mutation.Visible then
        return "Default", Color3.fromRGB(255, 255, 255)
    end
    local name = mutation.Text
    if name == "Rainbow" then
        return "Rainbow", Color3.new(1, 1, 1)
    end
    return name, mutationColors[name] or Color3.fromRGB(255, 255, 255)
end

local function createGui(base, labels)
    if base:FindFirstChild("StatGui") then
        base.StatGui:Destroy()
    end

    local gui = Instance.new("BillboardGui")
    gui.Name = "StatGui"
    gui.Size = UDim2.new(0, 200, 0, 60)
    gui.StudsOffset = Vector3.new(0, 3, 0)
    gui.AlwaysOnTop = true
    gui.Adornee = base
    gui.Parent = base

    local function createLabel(order, text, color)
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.25, 0)
        label.Position = UDim2.new(0, 0, 0.25 * (order - 1), 0)
        label.BackgroundTransparency = 1
        label.TextScaled = true
        label.Font = Enum.Font.SourceSansBold
        label.TextStrokeTransparency = 0.5
        label.Text = text or "N/A"
        label.TextColor3 = color or Color3.fromRGB(255, 255, 255)
        label.Name = "StatLine"
        label.Parent = gui
    end

    createLabel(1, labels.DisplayName, Color3.new(1,1,1))
    createLabel(2, labels.Generation, Color3.new(0.8,0.8,0.8))
    createLabel(3, labels.Mutation, labels.MutationColor or Color3.new(1,1,1))
    createLabel(4, labels.Rarity, Color3.new(0.5,1,0.5))

    return gui
end

local function getAllPodiums()
    local podiums = {}
    for _, plot in pairs(Workspace:WaitForChild("Plots"):GetChildren()) do
        local animalPods = plot:FindFirstChild("AnimalPodiums")
        if animalPods then
            for _, pod in pairs(animalPods:GetChildren()) do
                local base = pod:FindFirstChild("Base")
                if base and base:FindFirstChild("Spawn") then
                    local attach = base.Spawn:FindFirstChild("Attachment")
                    if attach and attach:FindFirstChild("AnimalOverhead") then
                        table.insert(podiums, attach.AnimalOverhead)
                    end
                end
            end
        end
    end
    return podiums
end

function enableHighestValueESP()
    highestValueEnabled = true
    StarterGui:SetCore("SendNotification", {Title = "Highest Value ESP", Text = "ON", Duration = 2})

    scanConnection = RunService.Heartbeat:Connect(function()
        if not highestValueEnabled then return end

        local bestValue = -1
        local bestPodiumInfo = nil

        for _, overhead in pairs(getAllPodiums()) do
            local genLabel = overhead:FindFirstChild("Generation")
            if genLabel then
                local genValue = extractNumber(genLabel.Text)
                if genValue > bestValue then
                    bestValue = genValue
                    local mutationLabel = overhead:FindFirstChild("Mutation")
                    local mutText, mutColor = getMutationTextAndColor(mutationLabel)
                    bestPodiumInfo = {
                        base = overhead.Parent.Parent.Parent,
                        labels = {
                            DisplayName = overhead:FindFirstChild("DisplayName") and overhead.DisplayName.Text or "Unknown",
                            Generation = genLabel.Text,
                            Mutation = mutText,
                            MutationColor = mutColor,
                            Rarity = overhead:FindFirstChild("Rarity") and overhead.Rarity.Text or "None"
                        }
                    }
                end
            end
        end

        if currentHighestGui and (not bestPodiumInfo or currentHighestGui.Adornee ~= bestPodiumInfo.base) then
            currentHighestGui:Destroy()
            currentHighestGui = nil
        end

        if bestPodiumInfo and (not currentHighestGui or currentHighestGui.Adornee ~= bestPodiumInfo.base) then
             if currentHighestGui then currentHighestGui:Destroy() end
            currentHighestGui = createGui(bestPodiumInfo.base, bestPodiumInfo.labels)
        end
    end)
end

function disableHighestValueESP()
    highestValueEnabled = false
    StarterGui:SetCore("SendNotification", {Title = "Highest Value ESP", Text = "OFF", Duration = 2})

    if scanConnection then
        scanConnection:Disconnect()
        scanConnection = nil
    end

    if currentHighestGui then
        currentHighestGui:Destroy()
        currentHighestGui = nil
    end
end


-- // BẮT ĐẦU: Các nút đã thêm
local btnWebSlinger = Instance.new("TextButton")
btnWebSlinger.Size = UDim2.new(0, 220, 0, 25)
btnWebSlinger.Position = UDim2.new(0.5, -110, 0, 100)
btnWebSlinger.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
btnWebSlinger.Text = "Web Slinger Auto Aim: OFF"
btnWebSlinger.TextColor3 = Color3.fromRGB(255, 255, 255)
btnWebSlinger.Font = Enum.Font.GothamBold
btnWebSlinger.TextSize = 14
btnWebSlinger.Parent = MainFrame
local BtnCornerWebSlinger = Instance.new("UICorner", btnWebSlinger)
BtnCornerWebSlinger.CornerRadius = UDim.new(0, 10)

local btnHighestValue = Instance.new("TextButton")
btnHighestValue.Size = UDim2.new(0, 220, 0, 25)
btnHighestValue.Position = UDim2.new(0.5, -110, 0, 130)
btnHighestValue.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
btnHighestValue.Text = "Highest Value ESP: OFF"
btnHighestValue.TextColor3 = Color3.fromRGB(255, 255, 255)
btnHighestValue.Font = Enum.Font.GothamBold
btnHighestValue.TextSize = 14
btnHighestValue.Parent = MainFrame
local BtnCornerHighestValue = Instance.new("UICorner", btnHighestValue)
BtnCornerHighestValue.CornerRadius = UDim.new(0, 10)

-- // KẾT THÚC: Các nút đã thêm
local btnLockTime = Instance.new("TextButton")
btnLockTime.Size = UDim2.new(0, 220, 0, 25)
btnLockTime.Position = UDim2.new(0.5, -110, 0, 160) -- Vị trí đã điều chỉnh
btnLockTime.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
btnLockTime.Text = "Lock Time: OFF"
btnLockTime.TextColor3 = Color3.fromRGB(255, 255, 255)
btnLockTime.Font = Enum.Font.GothamBold
btnLockTime.TextSize = 14
btnLockTime.Parent = MainFrame
local BtnCornerLockTime = Instance.new("UICorner", btnLockTime)
BtnCornerLockTime.CornerRadius = UDim.new(0, 10)

local btnPlayer = Instance.new("TextButton")
btnPlayer.Size = UDim2.new(0, 220, 0, 25)
btnPlayer.Position = UDim2.new(0.5, -110, 0, 190) -- Vị trí đã điều chỉnh
btnPlayer.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
btnPlayer.Text = "Player ESP: OFF"
btnPlayer.TextColor3 = Color3.fromRGB(255, 255, 255)
btnPlayer.Font = Enum.Font.GothamBold
btnPlayer.TextSize = 14
btnPlayer.Parent = MainFrame
local BtnCornerPlayer = Instance.new("UICorner", btnPlayer)
BtnCornerPlayer.CornerRadius = UDim.new(0, 10)

-- // Fly Menu Toggle Button
local FlyMenuToggleBtn = Instance.new("TextButton")
FlyMenuToggleBtn.Size = UDim2.new(0, 220, 0, 36)
FlyMenuToggleBtn.Position = UDim2.new(0.5, -110, 0, 220) -- Vị trí đã điều chỉnh
FlyMenuToggleBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
FlyMenuToggleBtn.Text = "Fly Menu: OFF"
FlyMenuToggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
FlyMenuToggleBtn.Font = Enum.Font.GothamBold
FlyMenuToggleBtn.TextSize = 16
FlyMenuToggleBtn.Parent = MainFrame
local BtnCornerFly = Instance.new("UICorner", FlyMenuToggleBtn)
BtnCornerFly.CornerRadius = UDim.new(0, 10)

-- // Fly Menu Frame (now a direct child of ScreenGui)
local FlyMenuFrame = Instance.new("Frame")
FlyMenuFrame.Size = UDim2.new(0, 240, 0, 120)
FlyMenuFrame.Position = UDim2.new(0.5, -120, 0.5, -60)
FlyMenuFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
FlyMenuFrame.BorderSizePixel = 0
FlyMenuFrame.Parent = ScreenGui
FlyMenuFrame.Draggable = true
FlyMenuFrame.Active = true
FlyMenuFrame.Visible = false
local FlyMenuCorner = Instance.new("UICorner", FlyMenuFrame)
FlyMenuCorner.CornerRadius = UDim.new(0, 12)
local FlyMenuStroke = Instance.new("UIStroke", FlyMenuFrame)
FlyMenuStroke.Color = Color3.fromRGB(120, 120, 255)
FlyMenuStroke.Thickness = 2

-- // Fly Menu Title Label
local FlyMenuTitle = Instance.new("TextLabel")
FlyMenuTitle.Size = UDim2.new(1, 0, 0, 30)
FlyMenuTitle.BackgroundTransparency = 1
FlyMenuTitle.Text = "TikTok : @monhub0"
FlyMenuTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
FlyMenuTitle.Font = Enum.Font.GothamBold
FlyMenuTitle.TextSize = 18
FlyMenuTitle.Parent = FlyMenuFrame

-- // Button Start
local StartBtn = Instance.new("TextButton")
StartBtn.Size = UDim2.new(0, 200, 0, 30)
StartBtn.Position = UDim2.new(0.5, -100, 0, 40)
StartBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
StartBtn.Text = "Start Process"
StartBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
StartBtn.Font = Enum.Font.GothamBold
StartBtn.TextSize = 16
StartBtn.Parent = FlyMenuFrame
StartBtn.AutoButtonColor = false
local BtnCornerStart = Instance.new("UICorner", StartBtn)
BtnCornerStart.CornerRadius = UDim.new(0, 10)

-- // Superman Button
local SupermanBtn = Instance.new("TextButton")
SupermanBtn.Size = UDim2.new(0, 200, 0, 30)
SupermanBtn.Position = UDim2.new(0.5, -100, 0, 75)
SupermanBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
SupermanBtn.Text = "Superman: OFF"
SupermanBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
SupermanBtn.Font = Enum.Font.GothamBold
SupermanBtn.TextSize = 16
SupermanBtn.Parent = FlyMenuFrame
SupermanBtn.AutoButtonColor = false
local SupermanBtnCorner = Instance.new("UICorner", SupermanBtn)
SupermanBtnCorner.CornerRadius = UDim.new(0, 10)

-- // Label "..."
local Label = Instance.new("TextLabel")
Label.Size = UDim2.new(1, 0, 0, 25)
Label.Position = UDim2.new(0, 0, 1, -25)
Label.BackgroundTransparency = 1
Label.Text = "..."
Label.TextColor3 = Color3.fromRGB(200, 200, 200)
Label.Font = Enum.Font.Gotham
Label.TextSize = 16
Label.Parent = FlyMenuFrame

-- // Toggle ẩn/hiện GUI chính
local isMainGuiOpen = true
ToggleBtn.MouseButton1Click:Connect(function()
    isMainGuiOpen = not isMainGuiOpen
    MainFrame.Visible = isMainGuiOpen
end)

-- // Toggle ẩn/hiện Fly Menu
local isFlyMenuOpen = false
FlyMenuToggleBtn.MouseButton1Click:Connect(function()
    isFlyMenuOpen = not isFlyMenuOpen
    FlyMenuFrame.Visible = isFlyMenuOpen
    FlyMenuToggleBtn.Text = isFlyMenuOpen and "Fly Menu: ON" or "Fly Menu: OFF"
end)

-- === CORE SCRIPT LOGIC ===
local isActive = false
local isMoving = false
local promptTriggered = false
local armCheckConnection = nil
local promptConnection = nil
local currentProcess = nil

-- Superman Mode Variables
local isSupermanModeActive = false
local supermanSpeedConnection = nil
local supermanJumpConnection = nil
local originalJumpPower = humanoid.JumpPower
local originalGravity = Workspace.Gravity

-- ESP Variables
local isLockTimeESPEnabled = false
local isPlayerESPEnabled = false

local lockTimeESPConnection = nil
local playerESPConnection = nil

local lockESPInstances = {}
local espPlayerBillboards = {}

-- === FUNCTION TO UPDATE STATUS LABEL ===
local function updateStatus(text)
    Label.Text = text
    print(text)
end

-- === RESET STATUS ON CHARACTER RESPAWN ===
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild("Humanoid")
    hrp = newCharacter:WaitForChild("HumanoidRootPart")
    updateStatus("Idle")
    print("Character respawned, status reset to Idle")
    -- Reset Superman Mode on respawn
    if isSupermanModeActive then
        isSupermanModeActive = false
        SupermanBtn.Text = "Superman: OFF"
        humanoid.JumpPower = originalJumpPower
        Workspace.Gravity = originalGravity
        if supermanSpeedConnection then
            supermanSpeedConnection:Disconnect()
            supermanSpeedConnection = nil
        end
        if supermanJumpConnection then
            supermanJumpConnection:Disconnect()
            supermanJumpConnection = nil
        end
    end
end)

-- === MOVEMENT SCRIPT ===
local function FindDelivery()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then
        warn("Plots folder not found in Workspace")
        return
    end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox then return hitbox end
            end
        end
    end
    warn("No valid DeliveryHitbox found")
end

local function setupFlight()
    if hrp:FindFirstChild("FlightAttachment") then
        hrp.FlightAttachment:Destroy()
    end
    if hrp:FindFirstChildOfClass("LinearVelocity") then
        hrp:FindFirstChildOfClass("LinearVelocity"):Destroy()
    end
    local attachment = Instance.new("Attachment")
    attachment.Name = "FlightAttachment"
    attachment.Parent = hrp
    local lv = Instance.new("LinearVelocity")
    lv.Attachment0 = attachment
    lv.RelativeTo = Enum.ActuatorRelativeTo.World
    lv.MaxForce = math.huge
    lv.Name = "FlightVelocity"
    lv.Parent = hrp
    return lv, attachment
end

local function moveToDelivery()
    local targetHitbox = FindDelivery()
    if not targetHitbox then
        warn("No target to move towards")
        updateStatus("No delivery target found")
        return
    end
    for _, obj in ipairs(hrp:GetChildren()) do
        if obj:IsA("LinearVelocity") or obj:IsA("Attachment") then
            obj:Destroy()
        end
    end
    local lv, attachment = setupFlight()
    local currentY = hrp.Position.Y
    updateStatus("Flying to delivery...")
    hrp.CFrame = hrp.CFrame + Vector3.new(0, 0, 0)
    task.wait(0.2)
    local speed = 41
    local reached = false
    local maxTime = 8
    local startTime = tick()
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            return
        end
        if not targetHitbox or not targetHitbox:IsDescendantOf(Workspace) then
            warn("Target lost during flight")
            updateStatus("Delivery target lost")
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            return
        end
        local targetPos = targetHitbox.Position - Vector3.new(0, 6, 0)
        local direction = (targetPos - hrp.Position)
        local distance = direction.Magnitude
        if distance <= 0.5 then
            updateStatus("Reached delivery target")
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.PlatformStand = false
                updateStatus("PlatformStand disabled")
            end
            return
        end
        if tick() - startTime >= maxTime then
            warn("Timeout before reaching delivery target")
            updateStatus("Timeout during delivery")
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            return
        end
        local unitDir = direction.Unit
        lv.VectorVelocity = Vector3.new(unitDir.X * speed, unitDir.Y * speed, unitDir.Z * speed)
        updateStatus("Moving to delivery, distance: " .. math.floor(distance))
    end)
    while not reached do
        task.wait(0.12)
    end
    if not isMoving then return end
    updateStatus("Starting smooth deceleration...")
    lv, attachment = setupFlight()
    for i = 1, 12 do
        if not isMoving then break end
        speed = speed * 0.6
        local dir = (targetHitbox.Position - Vector3.new(0, 6, 0) - hrp.Position)
        if dir.Magnitude > 0 then
            dir = dir.Unit
            lv.VectorVelocity = Vector3.new(dir.X * speed, dir.Y * speed, dir.Z * speed)
            updateStatus("Decelerating...")
        else
            lv.VectorVelocity = Vector3.zero
        end
        task.wait(0.05)
    end
    lv:Destroy()
    if not isMoving then return end
    updateStatus("Starting smooth descent...")
    lv, attachment = setupFlight()
    local targetY = targetHitbox.Position.Y - 6 + 2.5
    local reachedY = false
    connection = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reachedY = true
            return
        end
        if hrp.Position.Y <= targetY then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reachedY = true
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.PlatformStand = false
                updateStatus("PlatformStand disabled")
            end
            return
        end
        lv.VectorVelocity = Vector3.new(0, -speed, 0)
        updateStatus("Descending, current Y: " .. math.floor(hrp.Position.Y))
    end)
    while not reachedY do
        task.wait(0.05)
    end
    updateStatus("Cleaning up objects...")
    task.delay(0.5, function()
        if attachment then attachment:Destroy() end
        if isMoving then
            updateStatus("Idle")
            isMoving = false
            StartBtn.Text = "Start Process"
        end
    end)
end

local function getLaserCenter(model)
    if not model:IsA("Model") then return nil end
    local primary = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
    if not primary then return nil end
    return primary.Position
end

local function isSizeClose(partSize, targetSize, tolerance)
    return math.abs(partSize.X - targetSize.X) <= tolerance
    and math.abs(partSize.Y - targetSize.Y) <= tolerance
    and math.abs(partSize.Z - targetSize.Z) <= tolerance
end

local function getTargetForFloor(level, fromThirdFloor)
    local closestTarget, closestDistance = nil, math.huge
    for _, plot in ipairs(Workspace:WaitForChild("Plots"):GetChildren()) do
        if level == 1 then
            local laserFolder = plot:FindFirstChild("Laser")
            if laserFolder then
                for _, laser in ipairs(laserFolder:GetChildren()) do
                    if laser:IsA("Model") then
                        local pos = getLaserCenter(laser)
                        if pos and pos.Y <= 8 then
                            local dist = (pos - hrp.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestTarget = laser
                            end
                        end
                    end
                end
            end
        elseif level == 2 then
            if not fromThirdFloor then
                local modelFolder = plot:FindFirstChild("Model")
                local foundInitialTarget = false
                if modelFolder then
                    for _, obj in ipairs(modelFolder:GetChildren()) do
                        if obj:IsA("BasePart") and isSizeClose(obj.Size, Vector3.new(5, 1, 1), 0.01) then
                            local dist = (obj.Position - hrp.Position).Magnitude
                            if dist < 5 then
                                if dist < closestDistance then
                                    closestDistance = dist
                                    closestTarget = obj
                                    foundInitialTarget = true
                                end
                            end
                        end
                    end
                end
                if not foundInitialTarget then
                    local decorations = plot:FindFirstChild("Decorations")
                    if decorations then
                        for _, obj in ipairs(decorations:GetChildren()) do
                            if obj:IsA("BasePart") and isSizeClose(obj.Size, Vector3.new(45, 45, 2), 0.01) then
                                local posY = obj.Position.Y
                                if posY >= 8 and posY <= 9.1 then
                                    local dist = (obj.Position - hrp.Position).Magnitude
                                    if dist < closestDistance then
                                        closestDistance = dist
                                        closestTarget = obj
                                    end
                                end
                            end
                        end
                    end
                end
            else
                local decorations = plot:FindFirstChild("Decorations")
                if decorations then
                    for _, obj in ipairs(decorations:GetChildren()) do
                        if obj:IsA("BasePart") and isSizeClose(obj.Size, Vector3.new(17, 10, 2), 0.01) then
                            local dist = (obj.Position - hrp.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestTarget = obj
                            end
                        end
                    end
                end
            end
        elseif level == 3 then
            local laserHitboxFolder = plot:FindFirstChild("LaserHitbox")
            if laserHitboxFolder then
                local thirdFloorPart = laserHitboxFolder:FindFirstChild("ThirdFloor")
                if thirdFloorPart then
                    local dist = (thirdFloorPart.Position - hrp.Position).Magnitude
                    if dist < closestDistance then
                        closestDistance = dist
                        closestTarget = thirdFloorPart
                    end
                end
            end
        end
    end
    return closestTarget
end

local function getTargetPosition(target)
    if target:IsA("Model") then
        return getLaserCenter(target)
    elseif target:IsA("BasePart") then
        local pos = target.Position
        if isSizeClose(target.Size, Vector3.new(17, 10, 2), 0.01) then
            local zOffset = hrp.Position.X > -410 and 5 or -5
            pos = pos + Vector3.new(0, 0, zOffset)
        end
        return pos
    else
        return nil
    end
end

local function moveUntil(conditionFunc, directionFunc, callback)
    local speed = 41
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not isMoving then
            hrp.Velocity = Vector3.zero
            conn:Disconnect()
            return
        end
        if conditionFunc() then
            hrp.Velocity = Vector3.zero
            conn:Disconnect()
            if callback then callback() end
        else
            local dir = directionFunc()
            if dir.Magnitude > 0 then
                dir = dir.Unit
                hrp.Velocity = Vector3.new(dir.X * speed, hrp.Velocity.Y, dir.Z * speed)
            else
                hrp.Velocity = Vector3.zero
            end
        end
    end)
end

local function moveUntilLinear(conditionFunc, directionFunc, callback)
    local lv, attachment = setupFlight()
    local speed = 41
    local currentY = hrp.Position.Y
    local level = currentY <= 8 and 1 or (currentY <= 24 and 2 or 3)
    if level == 2 then
        speed = 39.5
    end
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            attachment:Destroy()
            conn:Disconnect()
            return
        end
        if conditionFunc() then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            attachment:Destroy()
            conn:Disconnect()
            if callback then callback() end
        else
            local dir = directionFunc()
            if dir.Magnitude > 0 then
                dir = dir.Unit
                lv.VectorVelocity = Vector3.new(dir.X * speed, 0, dir.Z * speed)
            else
                lv.VectorVelocity = Vector3.zero
            end
        end
    end)
end

local function moveToTarget(target, level, fromThirdFloor)
    local pos = getTargetPosition(target)
    if not pos then
        warn("Invalid target position")
        updateStatus("Invalid target")
        isMoving = false
        StartBtn.Text = "Start Process"
        return
    end
    local tolerance = 0.5
    updateStatus("Moving to target...")
    moveUntil(
        function()
            if level == 1 or (level == 2 and fromThirdFloor) then
                local charPos = hrp.Position
                local dx = math.abs(charPos.X - pos.X)
                local dz = math.abs(charPos.Z - pos.Z)
                local reached = dx < tolerance and dz < tolerance
                if reached then
                    updateStatus("Reached target on floor " .. level)
                end
                return reached
            elseif level == 2 then
                local distance = (hrp.Position - pos).Magnitude
                local reachedInitial = distance < 6
                if reachedInitial then
                    updateStatus("Found main target...")
                end
                return reachedInitial
            else
                local reached = (hrp.Position - pos).Magnitude < 1
                if reached then
                    updateStatus("Reached target on floor " .. level)
                end
                return reached
            end
        end,
        function()
            return pos - hrp.Position
        end,
        function()
            if level == 2 and not fromThirdFloor then
                local mainTarget = getTargetForFloor(2, true)
                if mainTarget then
                    updateStatus("Found main target on floor 2")
                    moveToTarget(mainTarget, 2, true)
                else
                    warn("No main target found on floor 2")
                    updateStatus("No main target found")
                    isMoving = false
                    StartBtn.Text = "Start Process"
                end
            elseif level == 3 then
                updateStatus("Waiting for fall...")
                local startY = hrp.Position.Y
                local conn
                conn = RunService.Heartbeat:Connect(function()
                    if hrp.Position.Y < startY - 1 then
                        conn:Disconnect()
                        updateStatus("Falling from third floor")
                        local newTarget = getTargetForFloor(2, true)
                        if newTarget then
                            moveToTarget(newTarget, 2, true)
                        else
                            warn("No target on floor 2 after fall")
                            updateStatus("No target on floor 2")
                            isMoving = false
                            StartBtn.Text = "Start Process"
                        end
                    end
                end)
            else
                updateStatus("Moving to X = -410...")
                moveUntilLinear(
                    function()
                        local distanceToTarget = math.abs(hrp.Position.X - (-410))
                        local reached = distanceToTarget < 1
                        local stopEarly = distanceToTarget <= 5
                        if stopEarly then
                            updateStatus("Starting delivery...")
                        end
                        return reached or stopEarly
                    end,
                    function()
                        return Vector3.new(hrp.Position.X > -410 and -1 or 1, 0, 0)
                    end,
                    function()
                        updateStatus("Starting delivery...")
                        moveToDelivery()
                    end
                )
            end
        end
    )
end

-- Function to check arm angle
local function checkArmRotation()
    if not character then return end
    local leftArm = character:FindFirstChild("LeftUpperArm")
    if not leftArm then return end
    return math.deg(leftArm.Orientation.X) > 60
end

-- Function to handle ProximityPrompt
local function handlePromptTriggered(prompt)
    if isActive and not promptTriggered then
        promptTriggered = true
        updateStatus("Prompt triggered.")
    end
end

-- Main process start function
local function startProcess()
    if isMoving then
        isMoving = false
        isActive = false
        StartBtn.Text = "Start Process"
        updateStatus("Process canceled")
        if promptConnection then
            promptConnection:Disconnect()
            promptConnection = nil
        end
        if armCheckConnection then
            armCheckConnection:Disconnect()
            armCheckConnection = nil
        end
    else
        isActive = true
        promptTriggered = false
        StartBtn.Text = "Waiting..."
        updateStatus("Waiting for prompt and arm rotation...")
        promptConnection = ProximityPromptService.PromptTriggered:Connect(handlePromptTriggered)
        armCheckConnection = RunService.Heartbeat:Connect(function()
            if not isActive then
                armCheckConnection:Disconnect()
                return
            end
            if promptTriggered and checkArmRotation() then
                isMoving = true
                isActive = false
                StartBtn.Text = "Cancel"
                if promptConnection then
                    promptConnection:Disconnect()
                    promptConnection = nil
                end
                if armCheckConnection then
                    armCheckConnection:Disconnect()
                    armCheckConnection = nil
                end
                updateStatus("Starting process...")
                local currentY = hrp.Position.Y
                local level = currentY <= 8 and 1 or (currentY <= 24 and 2 or 3)
                updateStatus("Current floor: " .. level)
                local target = getTargetForFloor(level, false)
                if target then
                    updateStatus("Found target for floor " .. level)
                    moveToTarget(target, level, false)
                else
                    warn("No target found for floor: " .. level)
                    updateStatus("No target found")
                    isMoving = false
                    StartBtn.Text = "Start Process"
                end
            end
        end)
    end
end

-- === ESP Functions ===
local function removeLockESP()
    for _, instance in pairs(lockESPInstances) do
        if instance and instance.Parent then
            instance:Destroy()
        end
    end
    lockESPInstances = {}
end

local function toggleLockTimeESP()
    isLockTimeESPEnabled = not isLockTimeESPEnabled
    if isLockTimeESPEnabled then
        btnLockTime.Text = "Lock Time: ON"
        lockTimeESPConnection = RunService.Heartbeat:Connect(function()
            if not isLockTimeESPEnabled then
                lockTimeESPConnection:Disconnect()
                return
            end
            for _, plot in ipairs(Workspace.Plots:GetChildren()) do
                local plotBlock = plot:FindFirstChild("Purchases", true)
                if plotBlock and plotBlock:FindFirstChild("PlotBlock") and plotBlock.PlotBlock:FindFirstChild("Main") then
                    local mainPart = plotBlock.PlotBlock.Main
                    local espName = "LockTimeESP_"..plot.Name
                    local remainingTimeText = "???"
                    local color = Color3.fromRGB(255,255,0)
    
                    local bbGui = mainPart:FindFirstChild("BillboardGui")
                    local remainingTimeLabel = bbGui and bbGui:FindFirstChild("RemainingTime")
                    if remainingTimeLabel and remainingTimeLabel:IsA("TextLabel") then
                        remainingTimeText = remainingTimeLabel.Text
                    end
        
                    local statusText = "Lock: "..remainingTimeText
        
                    if not lockESPInstances[plot.Name] or not lockESPInstances[plot.Name].Parent then
                        local bb = Instance.new("BillboardGui")
                        bb.Name = espName
                        bb.Size = UDim2.new(0,200,0,30)
                        bb.StudsOffset = Vector3.new(0,4,0)
                        bb.AlwaysOnTop = true
                        bb.Adornee = mainPart
                        bb.Parent = mainPart
        
                        local label = Instance.new("TextLabel")
                        label.Size = UDim2.new(1,0,1,0)
                        label.BackgroundTransparency = 1
                        label.Text = statusText
                        label.TextColor3 = color
                        label.TextStrokeColor3 = Color3.new(0,0,0)
                        label.TextStrokeTransparency = 0
                        label.TextScaled = true
                        label.Font = Enum.Font.GothamBold
                        label.Parent = bb
        
                        lockESPInstances[plot.Name] = bb
                    else
                        local bb = lockESPInstances[plot.Name]
                        if bb:FindFirstChildOfClass("TextLabel") then
                            bb.TextLabel.Text = statusText
                            bb.TextLabel.TextColor3 = color
                        end
                    end
                end
            end
        end)
    else
        btnLockTime.Text = "Lock Time: OFF"
        if lockTimeESPConnection then
            lockTimeESPConnection:Disconnect()
            lockTimeESPConnection = nil
        end
        removeLockESP()
    end
end

local function removePlayerESP()
    for _, bb in ipairs(espPlayerBillboards) do
        if bb and bb.Parent then bb:Destroy() end
    end
    espPlayerBillboards = {}
end

local function createPlayerESP(character, playerName)
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    if character:FindFirstChild("MonHubPlayerESP") then return end
    local rootPart = character.HumanoidRootPart
    local bb = Instance.new("BillboardGui")
    bb.Name = "MonHubPlayerESP"
    bb.Adornee = rootPart
    bb.Size = UDim2.new(0,150,0,30)
    bb.AlwaysOnTop = true
    bb.Parent = character
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.Text = playerName
    label.TextColor3 = Color3.new(1,1,1)
    label.TextStrokeTransparency = 0.5
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.Parent = bb
    table.insert(espPlayerBillboards, bb)
end

local function togglePlayerESP()
    isPlayerESPEnabled = not isPlayerESPEnabled
    if isPlayerESPEnabled then
        btnPlayer.Text = "Player ESP: ON"
        playerESPConnection = RunService.Heartbeat:Connect(function()
            if not isPlayerESPEnabled then
                playerESPConnection:Disconnect()
                return
            end
            removePlayerESP()
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and plr.Character then
                    createPlayerESP(plr.Character, plr.Name)
                end
            end
        end)
    else
        btnPlayer.Text = "Player ESP: OFF"
        if playerESPConnection then
            playerESPConnection:Disconnect()
            playerESPConnection = nil
        end
        removePlayerESP()
    end
end

-- === PLAYER TP GUI SCRIPT ===
local voidPlayerGui = Instance.new("ScreenGui")
voidPlayerGui.Name = "VoidPlayerGui"
voidPlayerGui.Parent = playerGui
voidPlayerGui.ResetOnSpawn = false
local tpMainFrame = Instance.new("Frame", voidPlayerGui)
tpMainFrame.Size = UDim2.new(0, 250, 0, 200)
tpMainFrame.Position = UDim2.new(0.35, 0, 0.3, 0)
tpMainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
tpMainFrame.BorderSizePixel = 0
tpMainFrame.Active = true
tpMainFrame.Draggable = true
tpMainFrame.Visible = false -- Bắt đầu ẩn
local tpTitle = Instance.new("TextLabel", tpMainFrame)
tpTitle.Size = UDim2.new(1, 0, 0, 30)
tpTitle.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
tpTitle.Text = "Mon Hub - Player TP"
tpTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
tpTitle.TextScaled = true
local tpPlayerList = Instance.new("TextButton", tpMainFrame)
tpPlayerList.Size = UDim2.new(1, -20, 0, 30)
tpPlayerList.Position = UDim2.new(0, 10, 0, 40)
tpPlayerList.BackgroundColor3 = Color3.fromRGB(60, 60, 90)
tpPlayerList.Text = "Select Player"
tpPlayerList.TextColor3 = Color3.fromRGB(255, 255, 255)
tpPlayerList.TextScaled = true
local tpListFrame = Instance.new("ScrollingFrame", tpMainFrame)
tpListFrame.Size = UDim2.new(1, -20, 0, 80)
tpListFrame.Position = UDim2.new(0, 10, 0, 75)
tpListFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
tpListFrame.ScrollBarThickness = 6
tpListFrame.Visible = false
local tpStartBtn = Instance.new("TextButton", tpMainFrame)
tpStartBtn.Size = UDim2.new(0.5, -15, 0, 30)
tpStartBtn.Position = UDim2.new(0, 10, 0, 160)
tpStartBtn.BackgroundColor3 = Color3.fromRGB(40, 150, 60)
tpStartBtn.Text = "Start"
tpStartBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
tpStartBtn.TextScaled = true
local tpStopBtn = Instance.new("TextButton", tpMainFrame)
tpStopBtn.Size = UDim2.new(0.5, -15, 0, 30)
tpStopBtn.Position = UDim2.new(0.5, 5, 0, 160)
tpStopBtn.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
tpStopBtn.Text = "Stop"
tpStopBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
tpStopBtn.TextScaled = true

local selectedPlayer = nil
local running = false
local tpConn = nil
local flingConn = nil

local function refreshPlayerList()
    tpListFrame:ClearAllChildren()
    local y = 0
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local btn = Instance.new("TextButton", tpListFrame)
            btn.Size = UDim2.new(1, -10, 0, 25)
            btn.Position = UDim2.new(0, 5, 0, y)
            btn.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
            btn.Text = plr.Name
            btn.TextColor3 = Color3.fromRGB(255,255,255)
            btn.TextScaled = true
            y = y + 30
            btn.MouseButton1Click:Connect(function()
                selectedPlayer = plr
                tpPlayerList.Text = "Selected: " .. plr.Name
                tpListFrame.Visible = false
            end)
        end
    end
    tpListFrame.CanvasSize = UDim2.new(0,0,0,y)
end

local function setupTP(char)
    if tpConn then tpConn:Disconnect() end
    if running and selectedPlayer and selectedPlayer.Character then
        tpConn = RunService.Heartbeat:Connect(function()
            if running and char and char:FindFirstChild("HumanoidRootPart") and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                char:PivotTo(selectedPlayer.Character.HumanoidRootPart.CFrame)
            end
        end)
    end
    
    if flingConn then flingConn:Disconnect() end
    flingConn = RunService.Heartbeat:Connect(function()
        if running then
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Velocity = Vector3.new(9999, 9999, 9999)
            end
        end
    end)
end

tpPlayerList.MouseButton1Click:Connect(function()
    refreshPlayerList()
    tpListFrame.Visible = not tpListFrame.Visible
end)

tpStartBtn.MouseButton1Click:Connect(function()
    if selectedPlayer and selectedPlayer.Character and LocalPlayer.Character then
        running = true
        setupTP(LocalPlayer.Character)
    end
end)

tpStopBtn.MouseButton1Click:Connect(function()
    running = false
    if tpConn then tpConn:Disconnect(); tpConn = nil end
    if flingConn then flingConn:Disconnect(); flingConn = nil end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
    if running then
        setupTP(char)
    end
end)

-- === BUTTON CLICK EVENT HANDLERS ===
StartBtn.MouseButton1Click:Connect(function()
    if isMoving then
        isMoving = false
        isActive = false
        StartBtn.Text = "Start Process"
        updateStatus("Process canceled")
        
        if promptConnection then
            promptConnection:Disconnect()
            promptConnection = nil
        end
        
        if armCheckConnection then
            armCheckConnection:Disconnect()
            armCheckConnection = nil
        end
    else
        startProcess()
    end
end)

SupermanBtn.MouseButton1Click:Connect(function()
    isSupermanModeActive = not isSupermanModeActive
    if isSupermanModeActive then
        SupermanBtn.Text = "Superman: ON"
        local speedMultiplier = 40
        local boostJumpPower = 80
        
        humanoid.JumpPower = boostJumpPower
        
        if supermanSpeedConnection then supermanSpeedConnection:Disconnect() end
        if supermanJumpConnection then supermanJumpConnection:Disconnect() end
        
        supermanSpeedConnection = RunService.RenderStepped:Connect(function()
            if humanoid and hrp then
                local moveDir = humanoid.MoveDirection
                if moveDir.Magnitude > 0 then
                    hrp.Velocity = Vector3.new(moveDir.X * speedMultiplier, hrp.Velocity.Y, moveDir.Z * speedMultiplier)
                else
                    hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
                end
            end
        end)
        
        supermanJumpConnection = humanoid.Jumping:Connect(function(active)
            if active then
                hrp.Velocity = Vector3.new(hrp.Velocity.X, boostJumpPower, hrp.Velocity.Z)
            end
        end)
    else
        SupermanBtn.Text = "Superman: OFF"
        humanoid.JumpPower = originalJumpPower
        Workspace.Gravity = originalGravity
        if supermanSpeedConnection then
            supermanSpeedConnection:Disconnect()
            supermanSpeedConnection = nil
        end
        
        if supermanJumpConnection then
            supermanJumpConnection:Disconnect()
            supermanJumpConnection = nil
        end
    end
end)

-- // BẮT ĐẦU: Các kết nối sự kiện đã thêm/sửa đổi
btnWebSlinger.MouseButton1Click:Connect(function()
    webSlingerAutoAimEnabled = not webSlingerAutoAimEnabled
    if webSlingerAutoAimEnabled then
        enableWebSlingerAutoAim()
        btnWebSlinger.Text = "Web Slinger Auto Aim: ON"
    else
        disableWebSlingerAutoAim()
        btnWebSlinger.Text = "Web Slinger Auto Aim: OFF"
    end
end)

btnHighestValue.MouseButton1Click:Connect(function()
    highestValueEnabled = not highestValueEnabled
    if highestValueEnabled then
        enableHighestValueESP()
        btnHighestValue.Text = "Highest Value ESP: ON"
    else
        disableHighestValueESP()
        btnHighestValue.Text = "Highest Value ESP: OFF"
    end
end)

btnLockTime.MouseButton1Click:Connect(toggleLockTimeESP)
btnPlayer.MouseButton1Click:Connect(togglePlayerESP)

-- New: Toggle Void Player
btnVoidPlayer.MouseButton1Click:Connect(function()
    isVoidPlayerActive = not isVoidPlayerActive
    btnVoidPlayer.Text = "Void Player: " .. (isVoidPlayerActive and "ON" or "OFF")
    
    if isVoidPlayerActive then
        tpMainFrame.Visible = true
        refreshPlayerList()
    else
        tpMainFrame.Visible = false
        running = false
        if tpConn then tpConn:Disconnect(); tpConn = nil end
        if flingConn then flingConn:Disconnect(); flingConn = nil end
    end
end)
